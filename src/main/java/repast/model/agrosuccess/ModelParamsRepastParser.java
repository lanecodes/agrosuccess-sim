/**
 * 
 */
package repast.model.agrosuccess;

import me.ajlane.geo.repast.seeddispersal.SeedDispersalParams;
import me.ajlane.geo.repast.seeddispersal.SeedViabilityParams;
import me.ajlane.geo.repast.soilmoisture.SoilMoistureParams;
import repast.simphony.parameter.IllegalParameterException;
import repast.simphony.parameter.Parameters;

/**
 * <p>
 * Given a set of parameters generated by Repast Simphony in the course of parsing parameters.xml
 * this class will bundle up parameters corresponding xParams classes ready for consumption in 
 * the model classes which need them.
 * </p>
 * 
 * <p>
 * The parameters which <em>must</em> be specified in the {@code repast.simphony.parameter.Parameters} 
 * object passed to the constructor are as follows:
 * </p>
 * 
 * <p><b>Seed longevity parameters</b></p>
 * <ul>
 * <li>{@code oakSeedLifetime} (Oak seed lifetime)</li>
 * <li>{@code pineSeedLifetime} (Pine seed lifetime)</li>
 * <li>{@code deciduousSeedLifetime} (Deciduous seed lifetime)</li>
 * </ul>
 * 
 * <p><b>Seed dispersal parameters</b></p>
 * <ul>
 * <li>{@code acornLocationParam} (Acorn location parameter)</li>
 * <li>{@code acornScaleParam} (Acorn scale parameter)</li>
 * <li>{@code acornMaxLognormalDist} (Max lognormal acorn dispersal distance)</li>
 * <li>{@code windDistDecreaseParam} (Wind distance decrease parameter)</li>
 * <li>{@code windMinExpDist} (Wind minimum exponential dispersal probability distance)</li>
 * <li>{@code windMaxExpDist} (Wind maximum exponential dispersal probability distance)</li>
 * </ul>
 * 
 * <p><b>Soil moisture parameters</b></p>
 * <ul>
 * <li>{@code mesicThreshold} (Mesic soil moisture threshold)</li>
 * <li>{@code hydricThreshold} (Hydric soil moisture threshold)</li>
 * </ul>
 * 
 * TODO In future it might be useful to have this class -- or a descendent of it -- implement 
 * AnthroModelParams (providing access to anthropogenic model patrameters) in addition to the 
 * EnvrModelParams already provided.
 * 
 * TODO A future development might also add a WildFireParams interface
 *  
 * @author Andrew Lane
 *
 */
public class ModelParamsRepastParser implements EnvrModelParams {
  
  private Parameters rp;
    
  ModelParamsRepastParser(Parameters repastParams) {
    this.rp = repastParams;   
  }
  
  /**
   * @param paramName The name of a parameter expected to be in this class's
   * {@code this.rp} object.
   * 
   * @return Value corresponding to the given parameter name cast as a {@code double}.
   */
  private double getDoubleParamValue(String paramName) {
    try {
      return this.rp.getDouble(paramName);
    } catch (IllegalParameterException e) {
      throw new UnspecifiedParameterException(
          "The parameter " + paramName + " could not be found.", e);
    }
  }
  
  /**
   * @param paramName The name of a parameter expected to be in this class's
   * {@code this.rp} object.
   * 
   * @return Value corresponding to the given parameter name cast as a {@code double}.
   */
  private int getIntParamValue(String paramName) {
    try {
      return this.rp.getInteger(paramName);
    } catch (IllegalParameterException e) {
      throw new UnspecifiedParameterException(
          "The parameter " + paramName + " could not be found.", e);
    }
  }
  
  /**
   * @return All parameters necessary for modelling seed dispersal.
   * @see repast.model.agrosuccess.EnvrModelParams#getSeedDispersalParams()
   */
  @Override
  public SeedDispersalParams getSeedDispersalParams() {
    return new SeedDispersalParams(
        getDoubleParamValue("acornLocationParam"), 
        getDoubleParamValue("acornScaleParam"), 
        getDoubleParamValue("acornMaxLognormalDist"), 
        getDoubleParamValue("windDistDecreaseParam"), 
        getDoubleParamValue("windMinExpDist"),
        getDoubleParamValue("windMaxExpDist"));
  }

  /** 
   * @return All parameters necessary for modelling seed survivorship in the seed bank
   * @see repast.model.agrosuccess.EnvrModelParams#getSeedViabilityParams()
   */
  @Override
  public SeedViabilityParams getSeedViabilityParams() {
    return new SeedViabilityParams(
        getIntParamValue("oakSeedLifetime"),
        getIntParamValue("pineSeedLifetime"),
        getIntParamValue("deciduousSeedLifetime"));
  }  

  /**
   * @return All parameters necessary for discretising soil moisture
   * @see repast.model.agrosuccess.EnvrModelParams#getSoilMoistureParams()
   */
  @Override
  public SoilMoistureParams getSoilMoistureParams() {
    return new SoilMoistureParams(
        getIntParamValue("mesicThreshold"), 
        getIntParamValue("hydricThreshold"));
  }

}
