package repast.model.agrosuccess.params;

import java.util.HashMap;
import java.util.Map;
import org.apache.log4j.Logger;
import me.ajlane.geo.repast.colonisation.randomkernel.SeedDispersalParams;
import me.ajlane.geo.repast.colonisation.randomkernel.SeedViabilityParams;
import me.ajlane.geo.repast.fire.FireParams;
import me.ajlane.geo.repast.fire.LcfReplicate;
import me.ajlane.geo.repast.soilmoisture.SoilMoistureParams;
import repast.simphony.parameter.IllegalParameterException;
import repast.simphony.parameter.Parameters;

/**
 * <p>
 * Given a set of parameters generated by Repast Simphony in the course of parsing parameters.xml
 * this class will bundle up parameters corresponding xParams classes ready for consumption in the
 * model classes which need them.
 * </p>
 *
 * <p>
 * The parameters which are expected to be specified in the
 * {@code repast.simphony.parameter.Parameters} object passed to the constructor are as follows:
 * </p>
 *
 * <p>
 * <b>Seed longevity parameters</b>
 * </p>
 * <ul>
 * <li>{@code oakSeedLifetime} (Oak seed lifetime)</li>
 * <li>{@code pineSeedLifetime} (Pine seed lifetime)</li>
 * <li>{@code deciduousSeedLifetime} (Deciduous seed lifetime)</li>
 * </ul>
 *
 * <p>
 * <b>Seed dispersal parameters</b>
 * </p>
 * <ul>
 * <li>{@code acornLocationParam} (Acorn location parameter)</li>
 * <li>{@code acornScaleParam} (Acorn scale parameter)</li>
 * <li>{@code acornMaxLognormalDist} (Max lognormal acorn dispersal distance)</li>
 * <li>{@code windDistDecreaseParam} (Wind distance decrease parameter)</li>
 * <li>{@code windMinExpDist} (Wind minimum exponential dispersal probability distance)</li>
 * <li>{@code windMaxExpDist} (Wind maximum exponential dispersal probability distance)</li>
 * </ul>
 *
 * <p>
 * <b>Soil moisture parameters</b>
 * </p>
 * <ul>
 * <li>{@code mesicThreshold} (Mesic soil moisture threshold)</li>
 * <li>{@code hydricThreshold} (Hydric soil moisture threshold)</li>
 * </ul>
 *
 * TODO In future it might be useful to have this class -- or a descendent of it -- implement
 * AnthroModelParams (providing access to anthropogenic model patrameters) in addition to the
 * EnvrModelParams already provided.
 *
 * TODO A future development might also add a WildFireParams interface
 *
 * @author Andrew Lane
 *
 */
public class ModelParamsRepastParser implements EnvrModelParams {

  final static Logger logger = Logger.getLogger(ModelParamsRepastParser.class);

  private Parameters rp;
  private Map<String, Integer> defaultSvParams = getDefaultSeedViabilityParams();
  private Map<String, Double> defaultSdParams = getDefaultSeedDispersalParams();
  private Map<String, Integer> defaultSmParams = getDefaultSoilMoistureParams();
  private Map<String, Object> defaultFireParams = getDefaultFireParams();

  public ModelParamsRepastParser(Parameters repastParams) {
    this.rp = repastParams;
  }

  private Map<String, Integer> getDefaultSeedViabilityParams() {
    Map<String, Integer> m = new HashMap<>();
    m.put("oakSeedLifetime", 7);
    m.put("pineSeedLifetime", 7);
    m.put("deciduousSeedLifetime", 7);
    return m;
  }

  private Map<String, Double> getDefaultSeedDispersalParams() {
    Map<String, Double> m = new HashMap<>();
    m.put("acornLocationParam", 3.844);
    m.put("acornScaleParam", 0.851);
    m.put("acornMaxLognormalDist", 550.0);
    m.put("windDistDecreaseParam", 5.0);
    m.put("windMinExpDist", 75.0);
    m.put("windMaxExpDist", 100.0);
    return m;
  }

  private Map<String, Integer> getDefaultSoilMoistureParams() {
    Map<String, Integer> m = new HashMap<>();
    m.put("mesicThreshold", 500);
    m.put("hydricThreshold", 1000);
    return m;
  }

  private Map<String, Object> getDefaultFireParams() {
    Map<String, Object> m = new HashMap<>();
    m.put("lcfReplicate", LcfReplicate.Default);
    m.put("climateIgnitionScalingParam", 12.0);
    return m;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public SeedViabilityParams getSeedViabilityParams() {
    return new SeedViabilityParams(
        getIntegerParam("oakSeedLifetime", this.defaultSvParams.get("oakSeedLifetime")),
        getIntegerParam("pineSeedLifetime", this.defaultSvParams.get("pineSeedLifetime")),
        getIntegerParam("deciduousSeedLifetime",
            this.defaultSvParams.get("deciduousSeedLifetime")));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public SeedDispersalParams getSeedDispersalParams() {
    return new SeedDispersalParams(
        getDoubleParam("acornLocationParam", this.defaultSdParams.get("acornLocationParam")),
        getDoubleParam("acornScaleParam", this.defaultSdParams.get("acornScaleParam")),
        getDoubleParam("acornMaxLognormalDist", this.defaultSdParams.get("acornMaxLognormalDist")),
        getDoubleParam("windDistDecreaseParam", this.defaultSdParams.get("windDistDecreaseParam")),
        getDoubleParam("windMinExpDist", this.defaultSdParams.get("windMinExpDist")),
        getDoubleParam("windMaxExpDist", this.defaultSdParams.get("windMaxExpDist")));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public SoilMoistureParams getSoilMoistureParams() {
    return new SoilMoistureParams(
        getIntegerParam("mesicThreshold", this.defaultSmParams.get("mesicThreshold")),
        getIntegerParam("hydricThreshold", this.defaultSmParams.get("hydricThreshold")));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public FireParams getFireParams() {
    String lcfString = getStringParam("lcfReplicate", "Default");
    double cisParam = getDoubleParam("climateIgnitionScalingParam",
        (double) this.defaultFireParams.get("climateIgnitionScalingParam"));

    return new FireParams(cisParam, LcfReplicate.valueOf(lcfString));
  }

  /**
   * @param paramName The name of a parameter expected to be specified in the {@code Parameters}
   *        object passed to this class's constructor. If no parameter of that name is found, a
   *        sensible default will be used instead.
   * @param defaultValue Value to use if {@code paramName} not found in the parameters object.
   * @return Value corresponding to the given parameter name
   */
  private Double getDoubleParam(String paramName, Double defaultValue) {
    Double value;
    try {
      value = this.rp.getDouble(paramName);
    } catch (IllegalParameterException e) {
      logger.warn(missingParamWarningMsg(paramName, defaultValue));
      value = defaultValue;
    }
    return value;
  }

  /**
   * @param paramName The name of a parameter expected to be specified in the {@code Parameters}
   *        object passed to this class's constructor. If no parameter of that name is found, a
   *        sensible default will be used instead.
   * @param defaultValue Value to use if {@code paramName} not found in the parameters object.
   * @return Value corresponding to the given parameter name
   */
  private Integer getIntegerParam(String paramName, Integer defaultValue) {
    Integer value;
    try {
      value = this.rp.getInteger(paramName);
    } catch (IllegalParameterException e) {
      logger.warn(missingParamWarningMsg(paramName, defaultValue));
      value = defaultValue;
    }
    return value;
  }

  /**
   * @param paramName The name of a parameter expected to be specified in the {@code Parameters}
   *        object passed to this class's constructor. If no parameter of that name is found, a
   *        sensible default will be used instead.
   * @param defaultValue Value to use if {@code paramName} not found in the parameters object.
   * @return Value corresponding to the given parameter name
   */
  private String getStringParam(String paramName, String defaultValue) {
    String value;
    try {
      value = this.rp.getString(paramName);
    } catch (IllegalParameterException e) {
      logger.warn(missingParamWarningMsg(paramName, defaultValue));
      value = defaultValue;
    }
    return value;
  }

  private <T> String missingParamWarningMsg(String paramName, T defaultValue) {
    return "Could not find entry for '" + paramName + "' in parameters.xml."
        + " Using default value of " + defaultValue;
  }

}
